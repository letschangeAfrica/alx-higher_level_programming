#!/usr/bin/python3

"""define a Node class"""


class Node:

    """
    square class with attribute data
    """

    def __init__(self, data, next_node=None):
        self.data = data
        self.next_node = next_node

    @property
    def data(self):
         """retrieve the attribute"""
        return self.__data

    @data.setter
    def data(self, value):
        """modify the attribute value"""
        if not isinstance(value, int):
            raise TypeError("data must be an integer")
        self.__data = value

    @property
    def next_node(self):
        return self.__next_node

    @next_node.setter
    def next_node(self, value):
        """retrieve the attribute"""
        if value is not None and not isinstance(value, Node):
            raise TypeError("next_node must be a Node object")
        self.__next_node = value


class SinglyLinkedList:
    """
    singlyLinkedList class
    """
    def __init__(self):
        self.head = None

    def sorted_insert(self, value):
        new_node = Node(value)

        # If the list is empty or the value is smaller than the head
        if self.head is None or value < self.head.data:
            new_node.next_node = self.head
            self.head = new_node
        else:
            current = self.head

            while current.next_node is not None and current.next_node.data < value:
                current = current.next_node

            new_node.next_node = current.next_node
            current.next_node = new_node

    def __str__(self):
        linked_list_str = ""
        current = self.head

        while current is not None:
            linked_list_str += str(current.data) + "\n"
            current = current.next_node

        return linked_list_str
